AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS App Runner service for Python Flask application'

Parameters:
  GitHubConnectionArn:
    Type: String
    Description: ARN of the GitHub connection

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Stack Configuration"
        Parameters:
          - DisableRollback

Resources:
  # 1. First, create VPC and networking components
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  # 2. Create Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # 3. Create Security Groups
  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for App Runner VPC connector
      VpcId: !Ref VPC

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppRunnerSecurityGroup

  # 4. Create VPC Endpoints
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref AppRunnerSecurityGroup

  # 5. Create App Runner VPC Connector
  AppRunnerVpcConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      VpcConnectorName: !Sub ${AWS::StackName}-connector
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref AppRunnerSecurityGroup

  # 6. Create Database Resources
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-db-credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: myappdb
      Engine: postgres
      EngineVersion: 15.4
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
        - !Ref DatabaseSecurityGroup
      PubliclyAccessible: false

  # 7. Create IAM Role
  AppRunnerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: 
                  - !Ref DatabaseSecret
                  - arn:aws:secretsmanager:us-east-1:182399709699:secret:flask_app_secrets-f2tk0b

  # 8. Finally, create App Runner Service
  AppRunnerService:
    Type: AWS::AppRunner::Service
    DependsOn: PostgresDB
    DeletionPolicy: Retain
    Properties:
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !GetAtt AppRunnerVpcConnector.VpcConnectorArn
      ServiceName: my-flask-app
      SourceConfiguration:
        AuthenticationConfiguration:
          ConnectionArn: !Ref GitHubConnectionArn
        AutoDeploymentsEnabled: true
        CodeRepository:
          RepositoryUrl: https://github.com/siliconshells/DE_FinalProject_KEH
          SourceCodeVersion:
            Type: BRANCH
            Value: main
          CodeConfiguration:
            CodeConfigurationValues:
              Runtime: PYTHON_3
              BuildCommand: python -m pip install --upgrade pip && pip3 install -r requirements.txt
              StartCommand: python app.py
              Port: 8080
              RuntimeEnvironmentVariables:
                - Name: FLASK_ENV
                  Value: production
                - Name: DB_SECRET_ARN
                  Value: !Ref DatabaseSecret
                - Name: DB_HOST
                  Value: !GetAtt PostgresDB.Endpoint.Address
                - Name: DB_PORT
                  Value: !GetAtt PostgresDB.Endpoint.Port
            ConfigurationSource: API
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
        InstanceRoleArn: !GetAtt AppRunnerServiceRole.Arn
      HealthCheckConfiguration:
        Protocol: HTTP
        Path: /health
        HealthyThreshold: 1
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5

Outputs:
  ServiceUrl:
    Description: URL of the App Runner service
    Value: !GetAtt AppRunnerService.ServiceUrl
  DatabaseEndpoint:
    Description: Database endpoint
    Value: !GetAtt PostgresDB.Endpoint.Address
  DatabaseSecret:
    Description: Database secret ARN
    Value: !Ref DatabaseSecret